import { describe, it, before, after } from "node:test"
import { NoLogger } from "@nan0web/log"
import assert from "node:assert/strict"
import { nano2attrs, nano2xml, defaultXMLTags, Case, XMLTags, escape } from "../src/index.js"

/**
 * @docs
 * # @nan0web/xml
 *
 * **XML transformer and utilities** – a lightweight library for converting nano‑style JavaScript objects to XML, handling attributes, case transformations, and more.
 *
 * ## Table of Contents
 *
 * - [Installation](#installation)
 * - [Quick start](#quick-start)
 * - [API reference](#api-reference)
 *   - [Case](#case)
 *   - [XMLTags](#xmltags)
 *   - [escape](#escape)
 *   - [nano2attrs](#nano2attrs)
 *   - [nano2xml](#nano2xml)
 * - [Testing](#testing)
 * - [Contributing](#contributing)
 * - [License](#license)
 *
 * ## Installation
 *
 * ```bash
 * npm i @nan0web/xml
 * ```
 *
 * The package is ESM‑only (`"type": "module"`).
 *
 * ## Quick start
*/
describe("README.md", () => {
	let originalConsole
	before(() => {
		originalConsole = console
		console = new NoLogger({ level: "debug" })
	})
	after(() => {
		console = originalConsole
	})
	it("Generating XML sitemap from NAN0 object", () => {
		// import { nano2xml, defaultXMLTags } from '@nan0web/xml'

		const data = [
			{ $version: '1.0', $encoding: 'UTF-8', '?xml': true },
			{
				$xmlns: 'http://www.sitemaps.org/schemas/sitemap/0.9', sitemapindex: [
					{
						sitemap: [
							{ loc: 'http://yaro.page/post-sitemap.xml' },
							{ lastmod: '2024-12-28T10:50:59+00:00' }
						]
					}
				]
			},
			{ '#XML Sitemap': 'generated by nano.js templates' },
		]

		const xml = nano2xml(data, { defaultTags: defaultXMLTags })
		console.log(xml)
		/*
		<?xml version="1.0" encoding="UTF-8"?>
		<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
			<sitemap>
				<loc>http://yaro.page/post-sitemap.xml</loc>
				<lastmod>2024-12-28T10:50:59+00:00</lastmod>
			</sitemap>
		</sitemapindex>
		<!-- XML Sitemap: generated by nano.js templates -->
		*/
		assert.equal(xml, [
			'<?xml version="1.0" encoding="UTF-8"?>',
			'<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">',
			'	<sitemap>',
			'		<loc>http://yaro.page/post-sitemap.xml</loc>',
			'		<lastmod>2024-12-28T10:50:59+00:00</lastmod>',
			'	</sitemap>',
			'</sitemapindex>',
			'<!-- XML Sitemap: generated by nano.js templates -->',
		].join("\n"))
	})
	/**
	 * @docs
	 * ## API reference
	 *
	 * ### `Case`
	 *
	 * Utility class for string case conversion.
	 *
	 * | Static constant | Value   |
	 * |-----------------|---------|
	 * | `Case.CAMEL`   | `camel` |
	 * | `Case.KEBAB`   | `kebab` |
	 * | `Case.SNAKE`   | `snake` |
	 * | `Case.PASCAL`  | `pascal` |
	 * | `Case.UPPER`   | `upper` |
	 * | `Case.LOWER`   | `lower` |
	 *
	 * **Methods**
	 *
	 * - `Case.transform(str, type)` – transforms `str` to the case given by `type` (one of the constants). Falls back to the original string if `type` is unknown.
	 * - Individual helpers (`toCamelCase`, `toKebabCase`, …) are also exposed.
	*/
	it("Camel case example", () => {
		// import { Case } from '@nan0web/xml'
		const value = Case.transform('my_string-value', Case.CAMEL)
		console.log(value) // → "myStringValue"
		assert.equal(value, "myStringValue")
	})
	/**
	 * @docs
	 * ### `XMLTags`
	 */
	it("Container for default XML tag names and a helper to generate closing strings.", () => {
		// import { XMLTags } from "@nan0web/xml"

		const tags = new XMLTags()
		tags.$default // "element"
		tags.books // "book"
		tags.$selfClosed("note") // "></note>"
		tags.$selfClosed("?xml") // "?>"
		assert.equal(tags.$default, "element")
		assert.equal(tags.books, "book")
		assert.equal(tags.$selfClosed("note"), "></note>")
		assert.equal(tags.$selfClosed("?xml"), "?>")
	})
	/**
	 * @docs
	 * ### `escape`
	 */
	it("Escapes HTML/XML entities.", () => {
		// import { escape } from "@nan0web/xml"

		escape("&<>\"'") // "&amp;&lt;&gt;&quot;&#039;"
		escape("&<>\"'", ["<", ">"]) // "&amp;<>&quot;&#039;"
		escape(123) // "123"
		assert.equal(escape("&<>\"'"), "&amp;&lt;&gt;&quot;&#039;")
		assert.equal(escape("&<>\"'", ["<", ">"]), "&amp;<>&quot;&#039;")
		assert.equal(escape(123), "123")
	})
	/**
	 * @docs
	 * ### `nano2attrs`
	 */
	it('Serialises an attribute object (`{ $id: "main", $hidden: true }`) to a string suitable for an XML tag.', () => {
		const a = nano2attrs({ $id: "main", $hidden: true })
		console.log(a) // → ' id="main" hidden'

		const b = nano2attrs(
			{ $dataValue: "test" },
			{ $attrCase: Case.UPPER, $attrTrue: "_flag" }
		)
		console.log(b) // → ' DATAVALUE="test"'
		assert.equal(a, ' id="main" hidden')
		assert.equal(b, ' DATAVALUE="test"')
	})
	/**
	 * @docs
	 * ### `nano2xml`
	 */
	it("Main conversion function – turns a nano‑style object into XML.", () => {
		// import nano2xml from "@nan0web/xml"

		const xml = nano2xml(
			{ $id: "1", note: "Hello" },
			{ indent: "  ", newLine: "\n" }
		)
		console.log(xml) // → '<note id="1">Hello</note>'
		assert.equal(xml, '<note id="1">Hello</note>')
	})

})
